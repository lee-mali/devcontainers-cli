{
	"SHELL": "/bin/bash",
	"NUGET_XMLDOC_MODE": "skip",
	"NVM_INC": "/usr/local/share/nvm/versions/node/v20.14.0/include/node",
	"rvm_prefix": "/usr/local",
	"HOSTNAME": "codespaces-c19a59",
	"JAVA_ROOT": "/home/codespace/java",
	"JAVA_HOME": "/usr/local/sdkman/candidates/java/current",
	"DOTNET_ROOT": "/usr/share/dotnet",
	"CODESPACES": "true",
	"GRADLE_HOME": "/usr/local/sdkman/candidates/gradle/current",
	"PYTHON_ROOT": "/home/codespace/.python",
	"rvm_stored_umask": "0022",
	"NVS_DIR": "/usr/local/nvs",
	"NVS_OS": "linux",
	"DOTNET_SKIP_FIRST_TIME_EXPERIENCE": "1",
	"MY_RUBY_HOME": "/usr/local/rvm/rubies/ruby-3.2.4",
	"NVS_USE_XZ": "1",
	"SDKMAN_CANDIDATES_DIR": "/usr/local/sdkman/candidates",
	"RUBY_VERSION": "ruby-3.2.4",
	"PIPX_BIN_DIR": "/usr/local/py-utils/bin",
	"rvm_version": "1.29.12 (latest)",
	"ORYX_DIR": "/usr/local/oryx",
	"rvm_user_install_flag": "0",
	"ContainerVersion": "13",
	"HUGO_ROOT": "/home/codespace/.hugo",
	"NPM_GLOBAL": "/home/codespace/.npm-global",
	"HOME": "/home/codespace",
	"LANG": "C.UTF-8",
	"LS_COLORS": "",
	"DYNAMIC_INSTALL_ROOT_DIR": "/opt",
	"NVM_SYMLINK_CURRENT": "true",
	"PHP_PATH": "/usr/local/php/current",
	"DEBIAN_FLAVOR": "focal-scm",
	"PHP_ROOT": "/home/codespace/.php",
	"ORYX_ENV_TYPE": "vsonline-present",
	"HUGO_DIR": "/usr/local/hugo/bin",
	"DOCKER_BUILDKIT": "1",
	"GOROOT": "/usr/local/go",
	"SHELL_LOGGED_IN": "true",
	"PYTHON_PATH": "/usr/local/python/current",
	"NVM_DIR": "/usr/local/share/nvm",
	"rvm_bin_path": "/usr/local/rvm/bin",
	"GEM_PATH": "/usr/local/rvm/gems/ruby-3.2.4:/usr/local/rvm/gems/ruby-3.2.4@global",
	"GEM_HOME": "/usr/local/rvm/gems/ruby-3.2.4",
	"LESSCLOSE": "/usr/bin/lesspipe %s %s",
	"NVS_ROOT": "/usr/local/nvs",
	"LESSOPEN": "| /usr/bin/lesspipe %s",
	"USER": "codespace",
	"NODE_ROOT": "/home/codespace/nvm",
	"PYTHONIOENCODING": "UTF-8",
	"NVS_HOME": "/usr/local/nvs",
	"PIPX_HOME": "/usr/local/py-utils",
	"rvm_loaded_flag": "1",
	"CONDA_SCRIPT": "/opt/conda/etc/profile.d/conda.sh",
	"MAVEN_HOME": "/usr/local/sdkman/candidates/maven/current",
	"SDKMAN_DIR": "/usr/local/sdkman",
	"SHLVL": "1",
	"NVM_CD_FLAGS": "",
	"ORYX_SDK_STORAGE_BASE_URL": "https://oryx-cdn.microsoft.io",
	"CONDA_DIR": "/opt/conda",
	"PROMPT_DIRTRIM": "4",
	"SDKMAN_CANDIDATES_API": "https://api.sdkman.io/2",
	"DOTNET_RUNNING_IN_CONTAINER": "true",
	"DOTNET_USE_POLLING_FILE_WATCHER": "true",
	"ENABLE_DYNAMIC_INSTALL": "true",
	"MAVEN_ROOT": "/home/codespace/.maven",
	"ORYX_PREFER_USER_INSTALLED_SDKS": "true",
	"JUPYTERLAB_PATH": "/home/codespace/.local/bin",
	"RVM_PATH": "/usr/local/rvm",
	"RAILS_DEVELOPMENT_HOSTS": ".githubpreview.dev,.preview.app.github.dev,.app.github.dev",
	"RUBY_ROOT": "/home/codespace/.ruby",
	"RUBY_HOME": "/usr/local/rvm/rubies/default",
	"PATH": "/home/codespace/.local/bin:/home/codespace/.dotnet:/home/codespace/nvm/current/bin:/home/codespace/.php/current/bin:/home/codespace/.python/current/bin:/home/codespace/java/current/bin:/home/codespace/.ruby/current/bin:/home/codespace/.local/bin:/usr/local/python/current/bin:/usr/local/py-utils/bin:/usr/local/oryx:/usr/local/go/bin:/go/bin:/usr/local/sdkman/bin:/usr/local/sdkman/candidates/java/current/bin:/usr/local/sdkman/candidates/gradle/current/bin:/usr/local/sdkman/candidates/maven/current/bin:/usr/local/sdkman/candidates/ant/current/bin:/usr/local/rvm/gems/default/bin:/usr/local/rvm/gems/default@global/bin:/usr/local/rvm/rubies/default/bin:/usr/local/share/rbenv/bin:/usr/local/php/current/bin:/opt/conda/bin:/usr/local/nvs:/usr/local/share/nvm/current/bin:/usr/local/hugo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/share/dotnet:/home/codespace/.dotnet/tools:/usr/local/rvm/bin",
	"SDKMAN_PLATFORM": "linuxx64",
	"NVM_BIN": "/usr/local/share/nvm/versions/node/v20.14.0/bin",
	"IRBRC": "/usr/local/rvm/rubies/ruby-3.2.4/.irbrc",
	"rvm_path": "/usr/local/rvm",
	"OLDPWD": "/vscode/bin/linux-x64/ea1445cc7016315d0f5728f8e8b12a45dc0a7286",
	"GOPATH": "/go",
	"BASH_FUNC_nvs%%": "() {  if [ -z \"${NVS_HOME}\" ]; then\n export NVS_HOME=\"${NVS_ROOT}\";\n fi;\n export NVS_POSTSCRIPT=\"${NVS_HOME}/nvs_tmp_$(dd if=/dev/urandom count=1 2> /dev/null | cksum | cut -f1 -d\" \").sh\";\n local NODE_EXE=\"node\";\n if [ \"${NVS_OS}\" = \"win\" ]; then\n NODE_EXE=\"node.exe\";\n fi;\n local NODE_PATH=\"${NVS_HOME}/cache/${NODE_EXE}\";\n if [ ! -f \"${NODE_PATH}\" ]; then\n local NODE_VERSION=\"$(grep '\"bootstrap\" *:' \"${NVS_ROOT}/defaults.json\" | sed -e 's/.*: *\"//' -e 's/\"[^\\n]*//' -e 's/.*\\///')\";\n local NODE_REMOTE=\"$(grep '\"bootstrap\" *:' \"${NVS_ROOT}/defaults.json\" | sed -e 's/.*: *\"//' -e 's/\"[^\\n]*//' -e 's/\\/.*//')\";\n local NODE_BASE_URI=\"$(grep \"\\\"${NODE_REMOTE}\\\" *:\" \"${NVS_ROOT}/defaults.json\" | sed -e 's/.*: *\"//' -e 's/\"[^\\n]*//')\";\n local NODE_ARCHIVE_EXT=\".tar.gz\";\n local TAR_FLAGS=\"-zxvf\";\n if [ \"${NVS_OS}\" = \"win\" ]; then\n NODE_ARCHIVE_EXT=\".7z\";\n else\n if [ \"${NVS_USE_XZ}\" = \"1\" ]; then\n NODE_ARCHIVE_EXT=\".tar.xz\";\n TAR_FLAGS=\"-Jxvf\";\n fi;\n fi;\n local NODE_ARCH=\"$(uname -m | sed -e 's/x86_64/x64/;s/i86pc/x64/;s/i686/x86/;s/aarch64/arm64/')\";\n if [ \"${NVS_OS}\" = \"aix\" ]; then\n NODE_ARCH=\"ppc64\";\n fi;\n local NODE_FULLNAME=\"node-v${NODE_VERSION}-${NVS_OS}-${NODE_ARCH}\";\n local NODE_URI=\"${NODE_BASE_URI}v${NODE_VERSION}/${NODE_FULLNAME}${NODE_ARCHIVE_EXT}\";\n local NODE_ARCHIVE=\"${NVS_HOME}/cache/${NODE_FULLNAME}${NODE_ARCHIVE_EXT}\";\n if [ ! -d \"${NVS_HOME}/cache\" ]; then\n command mkdir -p \"${NVS_HOME}/cache\";\n fi;\n echo \"Downloading bootstrap node from ${NODE_URI}\";\n if type noglob > /dev/null 2>&1; then\n noglob curl -L -# \"${NODE_URI}\" -o \"${NODE_ARCHIVE}\";\n else\n curl -L -# \"${NODE_URI}\" -o \"${NODE_ARCHIVE}\";\n fi;\n if [ ! -f \"${NODE_ARCHIVE}\" ] && [ \"${NODE_ARCHIVE_EXT}\" = \".tar.xz\" ]; then\n NODE_ARCHIVE_EXT=\".tar.gz\";\n TAR_FLAGS=\"-zxvf\";\n NODE_ARCHIVE=\"${NVS_HOME}/cache/${NODE_FULLNAME}${NODE_ARCHIVE_EXT}\";\n echo \"Retry download bootstrap node from ${NODE_URI} in gz format\";\n if type noglob > /dev/null 2>&1; then\n noglob curl -L -# \"${NODE_URI}\" -o \"${NODE_ARCHIVE}\";\n else\n curl -L -# \"${NODE_URI}\" -o \"${NODE_ARCHIVE}\";\n fi;\n fi;\n if [ ! -f \"${NODE_ARCHIVE}\" ]; then\n echo \"Failed to download node binary.\";\n return 1;\n fi;\n if [ \"${NVS_OS}\" = \"win\" ]; then\n \"${NVS_ROOT}/tools/7-Zip/7zr.exe\" e \"-o${NVS_HOME}/cache\" -y \"${NODE_ARCHIVE}\" \"${NODE_FULLNAME}/${NODE_EXE}\" > /dev/null 2>&1;\n else\n if [ \"${NVS_OS}\" = \"aix\" ]; then\n gunzip \"${NODE_ARCHIVE}\" | tar -xvC \"${NVS_HOME}/cache\" \"${NODE_FULLNAME}/bin/${NODE_EXE}\" > /dev/null 2>&1;\n else\n tar $TAR_FLAGS \"${NODE_ARCHIVE}\" -C \"${NVS_HOME}/cache\" \"${NODE_FULLNAME}/bin/${NODE_EXE}\" > /dev/null 2>&1;\n fi;\n mv \"${NVS_HOME}/cache/${NODE_FULLNAME}/bin/${NODE_EXE}\" \"${NVS_HOME}/cache/${NODE_EXE}\" > /dev/null 2>&1;\n rm -r \"${NVS_HOME}/cache/${NODE_FULLNAME}\" > /dev/null 2>&1;\n fi;\n if [ ! -f \"${NODE_PATH}\" ]; then\n echo \"Failed to setup node binary.\";\n return 1;\n fi;\n echo \"\";\n fi;\n local EXIT_CODE=0;\n case \"$@\" in \n \"cd\")\n local DIR=$PWD;\n while [ \"$DIR\" != \"\" -a ! \\( -e \"$DIR/.node-version\" -o -e \"$DIR/.nvmrc\" \\) ]; do\n if [ \"$DIR\" = \"/\" ]; then\n DIR=;\n else\n DIR=$(dirname \"$DIR\");\n fi;\n done;\n if [ \"$DIR\" != \"$NVS_AUTO_DIRECTORY\" ]; then\n command \"${NODE_PATH}\" \"${NVS_ROOT}/lib/index.js\" auto;\n EXIT_CODE=$?;\n fi;\n export NVS_AUTO_DIRECTORY=$DIR\n ;;\n *)\n command \"${NODE_PATH}\" \"${NVS_ROOT}/lib/index.js\" \"$@\";\n EXIT_CODE=$?\n ;;\n esac;\n if [ ${EXIT_CODE} = 2 ]; then\n rm \"${NODE_PATH}\";\n nvs $@;\n fi;\n if [ -f \"${NVS_POSTSCRIPT}\" ]; then\n . \"${NVS_POSTSCRIPT}\";\n command rm \"${NVS_POSTSCRIPT}\";\n unset NVS_POSTSCRIPT;\n fi;\n return $EXIT_CODE\n}",
	"BASH_FUNC_nvsudo%%": "() {  local NVS_CURRENT=`nvs which`;\n if [ -n \"${NVS_CURRENT}\" ]; then\n NVS_CURRENT=`dirname \"${NVS_CURRENT}\"`;\n fi;\n sudo \"NVS_CURRENT=${NVS_CURRENT}\" \"${NVS_ROOT}/nvs\" $*\n}",
	"_": "/usr/bin/cat"
}
